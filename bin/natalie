#!/usr/bin/env ruby

require_relative '../lib/optparse'
require 'tempfile'

if RUBY_ENGINE != 'natalie'
  # need this so we can run this script from any directory (even if that directory has a Gemfile of its own)
  ENV['BUNDLE_GEMFILE'] = File.expand_path('../Gemfile', __dir__)
  require 'bundler/setup'
end

require_relative '../lib/natalie'

orig_args = ARGV.dup

options = { load_path: [], require: [] }
OptionParser.new do |opts|
  opts.banner = 'Usage: natalie [options] file.rb'

  opts.program_name = 'Natalie'
  opts.version = '0.1'

  opts.on('-d [level]', '--debug [level]', 'Show debug output') do |level|
    case level
    when true
      options[:debug] = 'c'
    when 'p1', 'p2', 'p3', 'gdb', 'lldb', 'c', 'S', 'edit', 'cc-cmd', 'valgrind'
      options[:debug] = level
    else
      puts "Unrecognized -d value: #{level.inspect}"
      exit 1
    end
  end

  opts.on('-e one-line-script', 'Execute one-line script') do |e|
    options[:execute] = e
  end

  opts.on('--ast', 'Show AST rather than compiling') do |ast|
    options[:ast] = ast
  end

  opts.on('-c path', '--compile path', 'Compile to binary but do not execute') do |path|
    options[:compile] = path
  end

  opts.on('--write-obj path', 'Write to C++ file for object file') do |path|
    options[:write_obj_path] = path
  end

  opts.on('-r library', 'Require the library before executing your script') do |library|
    options[:require] << library
  end

  opts.on('-I path', 'Specify $LOAD_PATH directory (may be used more than once)') do |p|
    options[:load_path].unshift(p)
  end

  opts.on('--keep-cpp', 'Do not delete intermediate cpp file used for compilation') do
    options[:keep_cpp] = true
  end
end.parse!

cmake_cache_path = File.expand_path('../build/CMakeCache.txt', __dir__)
if File.exist?(cmake_cache_path) && File.read(cmake_cache_path) =~ /CMAKE_BUILD_TYPE:STRING=(.+)/
  options[:build] = $1.downcase
else
  options[:build] = 'debug'
end

class Runner
  def initialize(options)
    @options = options
  end

  attr_reader :options, :source_path, :code

  def run
    load_code
    if @repl
      repl = Natalie::Repl.new
      repl.go
    elsif options[:ast]
      require 'pp'
      pp ast
    elsif options[:compile]
      compiler.out_path = options[:compile]
      compiler.compile
    elsif options[:write_obj_path]
      compiler.compile
    elsif options[:debug] == 'cc-cmd'
      compiler.out_path = 'temp'
      compiler.to_c
      puts compiler.compiler_command
    elsif options[:debug] == 'c'
      compiler.write_file
      puts File.read(compiler.c_path)
      puts '-' * 80
      puts compiler.c_path
    elsif options[:debug] == 'S'
      show_assembly
    elsif options[:debug] == 'edit'
      edit_compile_run_loop
    elsif options[:debug] == 'valgrind'
      ENV['NAT_CXX_FLAGS'] = '-DNAT_GC_DISABLE'
      compile_and_run
    else
      compile_and_run
    end
  end

  private

  def compile_and_run
    out = Tempfile.create("natalie#{extension}")
    out.close
    compiler.out_path = out.path
    compiler.compile
    case options[:debug]
    when 'gdb', 'lldb'
      exec(options[:debug], out.path)
    when 'valgrind'
      exec('valgrind', '--leak-check=no', '--track-origins=yes', '--error-exitcode=1', out.path, *ARGV)
    else
      begin
        pid = spawn(out.path, *ARGV)
        Process.wait(pid)
        exit $?.exitstatus || 1
      ensure
        File.unlink(out.path)
      end
    end
  end

  def edit_compile_run_loop
    compiler.write_file
    loop do
      system(ENV['EDITOR'] || 'vim', compiler.c_path)
      out = Tempfile.create("natalie#{extension}")
      out.close
      compiler.out_path = out.path
      begin
        compiler.compile_c_to_binary
      rescue Natalie::Compiler::CompileError => e
        puts e
      else
        pid = spawn(out.path, *ARGV)
        Process.wait(pid)
      end
      print 'Edit again? [Yn] '
      response = gets.strip.downcase
      break if response == 'n'
    end
  end

  def show_assembly
    compiler.write_file
    compiler.out_path = '-'
    cmd = compiler.compiler_command.gsub(/-L [^ ]+|[^ ]+\.[ao]/, '')
    puts `#{cmd} -S -fverbose-asm 2>&1`
  end

  def load_code
    if options[:execute]
      @source_path = '-e'
      @code = options[:execute].gsub(/\\n/, "\n")
      if options[:require].any?
        @code = options[:require].map { |l| "require #{l.inspect}" }.join("\n") + "\n" + @code
      end
    elsif ARGV.any?
      @source_path = ARGV.shift
      @code = File.read(source_path)
      if options[:require].any?
        @code = options[:require].map { |l| "require #{l.inspect}" }.join("\n") + "\n" + @code
      end
    else
      @repl = true
      @source_path = '.'
    end
  end

  def extension
    if RUBY_PLATFORM =~ /msys/
      '.exe'
    else
      ''
    end
  end

  def compiler
    @compiler ||= Natalie::Compiler.new(ast, source_path, options).tap do |c|
      c.load_path = options[:load_path]
      c.write_obj_path = options[:write_obj_path]
    end
  end

  def parser
    @parser ||= Natalie::Parser.new(code, source_path)
  end

  def ast
    @ast ||= parser.ast
  end
end

Runner.new(options).run
